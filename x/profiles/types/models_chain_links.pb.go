// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/profiles/v4/models_chain_links.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/crypto/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/signing"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenerationAlgorithm represents various address generation algorithms
type GenerationAlgorithm int32

const (
	// GENERATION_ALGORITHM_UNKNOWN represents an unknown algorithm and will be discarded
	GenerationAlgorithm_GENERATION_ALGORITHM_UNKNOWN GenerationAlgorithm = 0
	// GENERATION_ALGORITHM_COSMOS represents the Cosmos generation algorithm
	GenerationAlgorithm_GENERATION_ALGORITHM_COSMOS GenerationAlgorithm = 1
	// GENERATION_ALGORITHM_EVM represents the EVM generation algorithm
	GenerationAlgorithm_GENERATION_ALGORITHM_EVM GenerationAlgorithm = 2
	// GENERATION_ALGORITHM_DO_NOTHING should be used when the public key bytes do not need to be modified
	GenerationAlgorithm_GENERATION_ALGORITHM_DO_NOTHING GenerationAlgorithm = 3
)

var GenerationAlgorithm_name = map[int32]string{
	0: "GENERATION_ALGORITHM_UNKNOWN",
	1: "GENERATION_ALGORITHM_COSMOS",
	2: "GENERATION_ALGORITHM_EVM",
	3: "GENERATION_ALGORITHM_DO_NOTHING",
}

var GenerationAlgorithm_value = map[string]int32{
	"GENERATION_ALGORITHM_UNKNOWN":    0,
	"GENERATION_ALGORITHM_COSMOS":     1,
	"GENERATION_ALGORITHM_EVM":        2,
	"GENERATION_ALGORITHM_DO_NOTHING": 3,
}

func (x GenerationAlgorithm) String() string {
	return proto.EnumName(GenerationAlgorithm_name, int32(x))
}

func (GenerationAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{0}
}

// SignatureValueType specifies all the possible signature types
type SignatureValueType int32

const (
	// SIGNATURE_VALUE_TYPE_UNSPECIFIED specifies an unknown signing mode
	// and will be rejected
	SIGNATURE_VALUE_TYPE_UNSPECIFIED SignatureValueType = 0
	// SIGNATURE_VALUE_TYPE_RAW should be used when the value has been
	// signed as a raw byte array
	SIGNATURE_VALUE_TYPE_RAW SignatureValueType = 1
	// SIGNATURE_VALUE_TYPE_COSMOS_DIRECT should be used when the signed
	// value has been encoded as a Protobuf transaction containing the owner
	// address inside its memo field
	SIGNATURE_VALUE_TYPE_COSMOS_DIRECT SignatureValueType = 2
	// SIGNATURE_VALUE_TYPE_COSMOS_AMINO should be used when the value has
	// been encoded as an Amino transaction containing the owner address inside
	// its memo field
	SIGNATURE_VALUE_TYPE_COSMOS_AMINO SignatureValueType = 3
	// SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN should be used when the value
	// has been encoded following the EVM personal_sign specification
	SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN SignatureValueType = 4
)

var SignatureValueType_name = map[int32]string{
	0: "SIGNATURE_VALUE_TYPE_UNSPECIFIED",
	1: "SIGNATURE_VALUE_TYPE_RAW",
	2: "SIGNATURE_VALUE_TYPE_COSMOS_DIRECT",
	3: "SIGNATURE_VALUE_TYPE_COSMOS_AMINO",
	4: "SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN",
}

var SignatureValueType_value = map[string]int32{
	"SIGNATURE_VALUE_TYPE_UNSPECIFIED":       0,
	"SIGNATURE_VALUE_TYPE_RAW":               1,
	"SIGNATURE_VALUE_TYPE_COSMOS_DIRECT":     2,
	"SIGNATURE_VALUE_TYPE_COSMOS_AMINO":      3,
	"SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN": 4,
}

func (x SignatureValueType) String() string {
	return proto.EnumName(SignatureValueType_name, int32(x))
}

func (SignatureValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{1}
}

// ChainLink contains the data representing either an inter- or cross- chain
// link
type ChainLink struct {
	// User defines the destination profile address to link
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" yaml:"user"`
	// Address contains the data of the external chain address to be connected
	// with the Desmos profile
	Address Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address" yaml:"address"`
	// Proof contains the ownership proof of the external chain address
	Proof Proof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof" yaml:"proof"`
	// ChainConfig contains the configuration of the external chain
	ChainConfig ChainConfig `protobuf:"bytes,4,opt,name=chain_config,json=chainConfig,proto3" json:"chain_config" yaml:"chain_config"`
	// CreationTime represents the time in which the link has been created
	CreationTime time.Time `protobuf:"bytes,5,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time" yaml:"creation_time"`
}

func (m *ChainLink) Reset()         { *m = ChainLink{} }
func (m *ChainLink) String() string { return proto.CompactTextString(m) }
func (*ChainLink) ProtoMessage()    {}
func (*ChainLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{0}
}
func (m *ChainLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainLink.Merge(m, src)
}
func (m *ChainLink) XXX_Size() int {
	return m.Size()
}
func (m *ChainLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainLink.DiscardUnknown(m)
}

var xxx_messageInfo_ChainLink proto.InternalMessageInfo

// ChainConfig contains the data of the chain with which the link is made.
type ChainConfig struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
}

func (m *ChainConfig) Reset()         { *m = ChainConfig{} }
func (m *ChainConfig) String() string { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()    {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{1}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

// Proof contains all the data used to verify a signature when linking an
// account to a profile
type Proof struct {
	// PubKey represents the public key associated with the address for which to
	// prove the ownership
	PubKey *types.Any `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty" yaml:"pub_key"`
	// Signature represents the hex-encoded signature of the PlainText value
	Signature *types.Any `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
	// PlainText represents the hex-encoded value signed in order to produce the
	// Signature
	PlainText string `protobuf:"bytes,3,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty" yaml:"plain_text"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{2}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

// Address contains the data of an external address
type Address struct {
	// Encoded value of the address
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Algorithm that has been used in order to generate the address starting from the public key bytes
	GenerationAlgorithm GenerationAlgorithm `protobuf:"varint,2,opt,name=generation_algorithm,json=generationAlgorithm,proto3,enum=desmos.profiles.v4.GenerationAlgorithm" json:"generation_algorithm,omitempty"`
	// Algorithm that needs to be used to properly encode the address
	EncodingAlgorithm *types.Any `protobuf:"bytes,3,opt,name=encoding_algorithm,json=encodingAlgorithm,proto3" json:"encoding_algorithm,omitempty"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{3}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

// Bech32Encoding represents the encoding algorithm based on the Bech32 format
type Bech32Encoding struct {
	// Prefix to be used
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *Bech32Encoding) Reset()         { *m = Bech32Encoding{} }
func (m *Bech32Encoding) String() string { return proto.CompactTextString(m) }
func (*Bech32Encoding) ProtoMessage()    {}
func (*Bech32Encoding) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{4}
}
func (m *Bech32Encoding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bech32Encoding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bech32Encoding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bech32Encoding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bech32Encoding.Merge(m, src)
}
func (m *Bech32Encoding) XXX_Size() int {
	return m.Size()
}
func (m *Bech32Encoding) XXX_DiscardUnknown() {
	xxx_messageInfo_Bech32Encoding.DiscardUnknown(m)
}

var xxx_messageInfo_Bech32Encoding proto.InternalMessageInfo

func (m *Bech32Encoding) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

// Base58Encoding represents the encoding algorithm based on the Base58 format
type Base58Encoding struct {
	// (optional) Prefix to be used
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *Base58Encoding) Reset()         { *m = Base58Encoding{} }
func (m *Base58Encoding) String() string { return proto.CompactTextString(m) }
func (*Base58Encoding) ProtoMessage()    {}
func (*Base58Encoding) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{5}
}
func (m *Base58Encoding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Base58Encoding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Base58Encoding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Base58Encoding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base58Encoding.Merge(m, src)
}
func (m *Base58Encoding) XXX_Size() int {
	return m.Size()
}
func (m *Base58Encoding) XXX_DiscardUnknown() {
	xxx_messageInfo_Base58Encoding.DiscardUnknown(m)
}

var xxx_messageInfo_Base58Encoding proto.InternalMessageInfo

func (m *Base58Encoding) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

// HexEncoding represents the encoding algorithm based on the Hex format
type HexEncoding struct {
	// (optional) Prefix to be used
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// (optional) Whether the address should be upper case or not (default: false)
	Uppercase bool `protobuf:"varint,2,opt,name=uppercase,proto3" json:"uppercase,omitempty"`
}

func (m *HexEncoding) Reset()         { *m = HexEncoding{} }
func (m *HexEncoding) String() string { return proto.CompactTextString(m) }
func (*HexEncoding) ProtoMessage()    {}
func (*HexEncoding) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{6}
}
func (m *HexEncoding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HexEncoding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HexEncoding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HexEncoding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HexEncoding.Merge(m, src)
}
func (m *HexEncoding) XXX_Size() int {
	return m.Size()
}
func (m *HexEncoding) XXX_DiscardUnknown() {
	xxx_messageInfo_HexEncoding.DiscardUnknown(m)
}

var xxx_messageInfo_HexEncoding proto.InternalMessageInfo

func (m *HexEncoding) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *HexEncoding) GetUppercase() bool {
	if m != nil {
		return m.Uppercase
	}
	return false
}

// SingleSignature is the signature data for a single signer
type SingleSignature struct {
	// Type represents the type of the signature value
	ValueType SignatureValueType `protobuf:"varint,1,opt,name=value_type,json=valueType,proto3,enum=desmos.profiles.v4.SignatureValueType" json:"value_type,omitempty" yaml:"value_type"`
	// Signature is the raw signature bytes
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" yaml:"signature"`
}

func (m *SingleSignature) Reset()         { *m = SingleSignature{} }
func (m *SingleSignature) String() string { return proto.CompactTextString(m) }
func (*SingleSignature) ProtoMessage()    {}
func (*SingleSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{7}
}
func (m *SingleSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleSignature.Merge(m, src)
}
func (m *SingleSignature) XXX_Size() int {
	return m.Size()
}
func (m *SingleSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleSignature.DiscardUnknown(m)
}

var xxx_messageInfo_SingleSignature proto.InternalMessageInfo

// CosmosMultiSignature is the signature data for a multisig public key
type CosmosMultiSignature struct {
	// Bitarray specifies which keys within the multisig are signing
	BitArray *types1.CompactBitArray `protobuf:"bytes,1,opt,name=bit_array,json=bitArray,proto3" json:"bit_array,omitempty" yaml:"bit_array"`
	// Signatures is the signatures of the multi-signature
	Signatures []*types.Any `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" yaml:"signatures"`
}

func (m *CosmosMultiSignature) Reset()         { *m = CosmosMultiSignature{} }
func (m *CosmosMultiSignature) String() string { return proto.CompactTextString(m) }
func (*CosmosMultiSignature) ProtoMessage()    {}
func (*CosmosMultiSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_e930944b7ed37f1e, []int{8}
}
func (m *CosmosMultiSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosMultiSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosMultiSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosMultiSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosMultiSignature.Merge(m, src)
}
func (m *CosmosMultiSignature) XXX_Size() int {
	return m.Size()
}
func (m *CosmosMultiSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosMultiSignature.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosMultiSignature proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("desmos.profiles.v4.GenerationAlgorithm", GenerationAlgorithm_name, GenerationAlgorithm_value)
	proto.RegisterEnum("desmos.profiles.v4.SignatureValueType", SignatureValueType_name, SignatureValueType_value)
	proto.RegisterType((*ChainLink)(nil), "desmos.profiles.v4.ChainLink")
	proto.RegisterType((*ChainConfig)(nil), "desmos.profiles.v4.ChainConfig")
	proto.RegisterType((*Proof)(nil), "desmos.profiles.v4.Proof")
	proto.RegisterType((*Address)(nil), "desmos.profiles.v4.Address")
	proto.RegisterType((*Bech32Encoding)(nil), "desmos.profiles.v4.Bech32Encoding")
	proto.RegisterType((*Base58Encoding)(nil), "desmos.profiles.v4.Base58Encoding")
	proto.RegisterType((*HexEncoding)(nil), "desmos.profiles.v4.HexEncoding")
	proto.RegisterType((*SingleSignature)(nil), "desmos.profiles.v4.SingleSignature")
	proto.RegisterType((*CosmosMultiSignature)(nil), "desmos.profiles.v4.CosmosMultiSignature")
}

func init() {
	proto.RegisterFile("desmos/profiles/v4/models_chain_links.proto", fileDescriptor_e930944b7ed37f1e)
}

var fileDescriptor_e930944b7ed37f1e = []byte{
	// 1071 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xd1, 0x6b, 0xdb, 0x46,
	0x1c, 0xb6, 0xea, 0xa4, 0xa9, 0xcf, 0x59, 0xe2, 0x5e, 0xdc, 0xe2, 0x26, 0xc1, 0x4a, 0xd5, 0x2d,
	0x2d, 0x19, 0x91, 0x88, 0x9b, 0xc1, 0x08, 0x0c, 0x26, 0x39, 0x5a, 0x62, 0x12, 0xcb, 0xe1, 0xec,
	0xa4, 0x59, 0x19, 0x08, 0x59, 0xb9, 0x28, 0x22, 0xb2, 0x24, 0x24, 0x39, 0xd8, 0xff, 0x41, 0x1f,
	0xfb, 0x58, 0xd8, 0x4b, 0x60, 0xff, 0x42, 0x9f, 0xf6, 0x17, 0x94, 0x3e, 0x95, 0x3e, 0x6d, 0x2f,
	0xd9, 0x48, 0x18, 0x0c, 0xf6, 0x96, 0xbf, 0x60, 0x9c, 0xee, 0x64, 0x1b, 0x5b, 0xed, 0x60, 0x6f,
	0xfe, 0xdd, 0xef, 0xfb, 0x3e, 0xdd, 0xef, 0xbe, 0xef, 0x0e, 0x83, 0xaf, 0x4f, 0x70, 0xd8, 0xf1,
	0x42, 0xc9, 0x0f, 0xbc, 0x53, 0xdb, 0xc1, 0xa1, 0x74, 0xb1, 0x29, 0x75, 0xbc, 0x13, 0xec, 0x84,
	0xba, 0x79, 0x66, 0xd8, 0xae, 0xee, 0xd8, 0xee, 0x79, 0x28, 0xfa, 0x81, 0x17, 0x79, 0x10, 0x52,
	0xb0, 0x98, 0x80, 0xc5, 0x8b, 0xcd, 0xc5, 0xa2, 0xe5, 0x59, 0x5e, 0xdc, 0x96, 0xc8, 0x2f, 0x8a,
	0x5c, 0x7c, 0x64, 0x79, 0x9e, 0xe5, 0x60, 0x29, 0xae, 0xda, 0xdd, 0x53, 0xc9, 0x70, 0xfb, 0xac,
	0xc5, 0x8f, 0xb7, 0x22, 0xbb, 0x83, 0xc3, 0xc8, 0xe8, 0xf8, 0x09, 0xd7, 0xf4, 0xc8, 0x57, 0x74,
	0x2a, 0x4a, 0x0b, 0xd6, 0x7a, 0x4a, 0x2b, 0x29, 0xea, 0x49, 0xa1, 0x6d, 0xb9, 0xb6, 0x6b, 0x49,
	0x17, 0x1b, 0x6d, 0x1c, 0x19, 0x1b, 0x49, 0xcd, 0x80, 0xeb, 0x0c, 0x68, 0x06, 0x7d, 0x3f, 0xf2,
	0xa4, 0x4e, 0xd7, 0x89, 0xec, 0xd0, 0x1e, 0xa2, 0x93, 0x05, 0x0a, 0x17, 0xde, 0x64, 0x41, 0xae,
	0x4a, 0xc6, 0xdd, 0xb7, 0xdd, 0x73, 0xf8, 0x04, 0x4c, 0x75, 0x43, 0x1c, 0x94, 0xb8, 0x15, 0xee,
	0x59, 0x4e, 0x99, 0xbf, 0xbd, 0xe2, 0xf3, 0x7d, 0xa3, 0xe3, 0x6c, 0x09, 0x64, 0x55, 0x40, 0x71,
	0x13, 0xd6, 0xc1, 0x8c, 0x71, 0x72, 0x12, 0xe0, 0x30, 0x2c, 0xdd, 0x59, 0xe1, 0x9e, 0xe5, 0x2b,
	0x4b, 0xe2, 0xe4, 0xe9, 0x88, 0x32, 0x85, 0x28, 0x0f, 0xdf, 0x5d, 0xf1, 0x99, 0xdb, 0x2b, 0x7e,
	0x8e, 0x0a, 0x31, 0xa6, 0x80, 0x12, 0x0d, 0xa8, 0x82, 0x69, 0x3f, 0xf0, 0xbc, 0xd3, 0x52, 0x36,
	0x16, 0x7b, 0x94, 0x26, 0x76, 0x40, 0x00, 0x4a, 0x91, 0x49, 0xcd, 0x52, 0xa9, 0x98, 0x25, 0x20,
	0xca, 0x86, 0x3a, 0x98, 0xa5, 0xb6, 0x99, 0x9e, 0x7b, 0x6a, 0x5b, 0xa5, 0xa9, 0x58, 0x8d, 0x4f,
	0x53, 0x8b, 0xe7, 0xad, 0xc6, 0x30, 0x65, 0x89, 0x69, 0x2e, 0x50, 0xcd, 0x51, 0x09, 0x01, 0xe5,
	0xcd, 0x21, 0x12, 0x1a, 0xe0, 0x0b, 0x33, 0xc0, 0x46, 0x64, 0x7b, 0xae, 0x4e, 0x8c, 0x2b, 0x4d,
	0xc7, 0x5f, 0x58, 0x14, 0xa9, 0xab, 0x62, 0xe2, 0xaa, 0xd8, 0x4a, 0x5c, 0x55, 0x56, 0x98, 0x78,
	0x91, 0x89, 0x8f, 0xd2, 0x85, 0xd7, 0x7f, 0xf0, 0x1c, 0x9a, 0x4d, 0xd6, 0x08, 0x69, 0x6b, 0xf6,
	0xd5, 0x25, 0x9f, 0x79, 0x73, 0xc9, 0x73, 0x7f, 0x5f, 0xf2, 0x9c, 0xf0, 0x3d, 0xc8, 0x8f, 0xec,
	0x94, 0x78, 0xe3, 0x1a, 0x1d, 0x3c, 0xe9, 0x0d, 0x59, 0x15, 0x50, 0xdc, 0x1c, 0x53, 0xf8, 0x8b,
	0x03, 0xd3, 0xf1, 0xd1, 0x41, 0x19, 0xcc, 0xf8, 0xdd, 0xb6, 0x7e, 0x8e, 0xfb, 0x31, 0x3f, 0x5f,
	0x29, 0x4e, 0x6c, 0x5b, 0x76, 0xfb, 0x0a, 0x1c, 0x1a, 0xc5, 0xe0, 0x02, 0xba, 0xeb, 0x77, 0xdb,
	0x7b, 0xb8, 0x0f, 0x0f, 0x41, 0x8e, 0x24, 0xcd, 0x88, 0xba, 0x01, 0x66, 0xc6, 0xa7, 0x8b, 0x3c,
	0xbe, 0xbd, 0xe2, 0x0b, 0x54, 0x64, 0x40, 0x10, 0xde, 0xbf, 0x5d, 0xcf, 0x35, 0x93, 0x0a, 0x0d,
	0x95, 0xe0, 0x26, 0x00, 0xbe, 0x43, 0x0e, 0x3d, 0xc2, 0xbd, 0x28, 0xce, 0x40, 0x4e, 0x79, 0x70,
	0x7b, 0xc5, 0xdf, 0x67, 0xdb, 0x18, 0xf4, 0x04, 0x94, 0x8b, 0x8b, 0x16, 0xee, 0x45, 0x63, 0x73,
	0xde, 0x70, 0x60, 0x86, 0xe5, 0x0d, 0x16, 0xc1, 0xf4, 0x85, 0xe1, 0x74, 0xd9, 0x39, 0x21, 0x5a,
	0xc0, 0x97, 0xa0, 0x68, 0x61, 0x17, 0x07, 0xf4, 0xfc, 0x0d, 0xc7, 0xf2, 0x02, 0x3b, 0x3a, 0xeb,
	0xc4, 0x73, 0xcc, 0x55, 0x9e, 0xa6, 0xa5, 0x64, 0x67, 0x80, 0x97, 0x13, 0x38, 0x5a, 0xb0, 0x26,
	0x17, 0xe1, 0x31, 0x80, 0xd8, 0x35, 0xbd, 0x13, 0xdb, 0xb5, 0x46, 0x94, 0xb3, 0x9f, 0x39, 0xa1,
	0x85, 0xf7, 0x6f, 0xd7, 0xe7, 0xd9, 0x86, 0x55, 0x46, 0x45, 0xf7, 0x13, 0x91, 0x81, 0xf2, 0xd8,
	0x94, 0xdf, 0x81, 0x39, 0x05, 0x9b, 0x67, 0xcf, 0x2b, 0x09, 0x05, 0x3e, 0x04, 0x77, 0xfd, 0x00,
	0x9f, 0xda, 0x3d, 0x36, 0x2c, 0xab, 0xb6, 0x16, 0x3e, 0x4e, 0xea, 0xc7, 0x74, 0x23, 0xc4, 0xdf,
	0x7c, 0xfb, 0xff, 0xe8, 0xc7, 0x20, 0xbf, 0x8b, 0x7b, 0xff, 0xc5, 0x85, 0xcb, 0x20, 0xd7, 0xf5,
	0x7d, 0x1c, 0x98, 0x46, 0x48, 0x53, 0x72, 0x0f, 0x0d, 0x17, 0xd2, 0x95, 0x7f, 0xe5, 0xc0, 0x7c,
	0xd3, 0x76, 0x2d, 0x07, 0x0f, 0x02, 0x02, 0x7f, 0x02, 0x20, 0x36, 0x4e, 0x8f, 0xfa, 0x3e, 0xb5,
	0x72, 0xae, 0xb2, 0x9a, 0xe6, 0xd2, 0x80, 0x72, 0x44, 0xe0, 0xad, 0xbe, 0x8f, 0x47, 0xd3, 0x33,
	0xd4, 0x10, 0x50, 0xee, 0x22, 0x41, 0xc0, 0xca, 0x78, 0x94, 0x67, 0x95, 0x62, 0x5a, 0x68, 0x47,
	0x72, 0xba, 0xf5, 0x80, 0x78, 0x41, 0x7c, 0xf8, 0x38, 0x9a, 0x64, 0xe1, 0x1f, 0x0e, 0x14, 0xab,
	0xf1, 0x8b, 0x5b, 0x27, 0x0f, 0xeb, 0x70, 0x82, 0x36, 0xc8, 0xb5, 0xed, 0x48, 0x37, 0x82, 0xc0,
	0x48, 0xee, 0x9c, 0x24, 0xb2, 0x27, 0x9d, 0xbe, 0xcd, 0xe2, 0xe0, 0x29, 0x66, 0x6f, 0xb3, 0x58,
	0xf5, 0x3a, 0xbe, 0x61, 0x46, 0x8a, 0x1d, 0xc9, 0x84, 0x36, 0xba, 0xa9, 0x81, 0x96, 0x80, 0xee,
	0xb5, 0x59, 0x1f, 0x1e, 0x03, 0x30, 0xd8, 0x20, 0x79, 0x8c, 0xb3, 0x9f, 0x4c, 0x9c, 0x30, 0x3c,
	0x93, 0x21, 0x63, 0xec, 0x52, 0x8e, 0x68, 0x7d, 0x62, 0xda, 0xb5, 0x9f, 0x39, 0xb0, 0x90, 0x72,
	0x2f, 0xe0, 0x0a, 0x58, 0xde, 0x51, 0x35, 0x15, 0xc9, 0xad, 0x5a, 0x43, 0xd3, 0xe5, 0xfd, 0x9d,
	0x06, 0xaa, 0xb5, 0x76, 0xeb, 0xfa, 0xa1, 0xb6, 0xa7, 0x35, 0x5e, 0x68, 0x85, 0x0c, 0xe4, 0xc1,
	0x52, 0x2a, 0xa2, 0xda, 0x68, 0xd6, 0x1b, 0xcd, 0x02, 0x07, 0x97, 0x41, 0x29, 0x15, 0xa0, 0x1e,
	0xd5, 0x0b, 0x77, 0xe0, 0x13, 0xc0, 0xa7, 0x76, 0xb7, 0x1b, 0xba, 0xd6, 0x68, 0xed, 0xd6, 0xb4,
	0x9d, 0x42, 0x76, 0xed, 0x77, 0x0e, 0xc0, 0xc9, 0x3c, 0xc0, 0x2f, 0xc1, 0x4a, 0xb3, 0xb6, 0xa3,
	0xc9, 0xad, 0x43, 0xa4, 0xea, 0x47, 0xf2, 0xfe, 0xa1, 0xaa, 0xb7, 0x7e, 0x3c, 0x50, 0xf5, 0x43,
	0xad, 0x79, 0xa0, 0x56, 0x6b, 0x3f, 0xd4, 0xd4, 0xed, 0x42, 0x86, 0x7c, 0x3f, 0x15, 0x85, 0xe4,
	0x17, 0x05, 0x0e, 0xae, 0x02, 0x21, 0xb5, 0x4b, 0xb7, 0xaf, 0x6f, 0xd7, 0x90, 0x5a, 0x6d, 0x15,
	0xee, 0xc0, 0xaf, 0xc0, 0xe3, 0xcf, 0xe1, 0xe4, 0x7a, 0x4d, 0x6b, 0x14, 0xb2, 0x70, 0x0d, 0xac,
	0xa6, 0xc2, 0xd4, 0xa3, 0xba, 0x7e, 0xa0, 0xa2, 0x66, 0x43, 0x93, 0xf7, 0x75, 0x82, 0x28, 0x4c,
	0x2d, 0x4e, 0xbd, 0xfa, 0xa5, 0x9c, 0x51, 0xf6, 0xde, 0x5d, 0x97, 0xb9, 0x0f, 0xd7, 0x65, 0xee,
	0xcf, 0xeb, 0x32, 0xf7, 0xfa, 0xa6, 0x9c, 0xf9, 0x70, 0x53, 0xce, 0xfc, 0x76, 0x53, 0xce, 0xbc,
	0xdc, 0xb0, 0xec, 0xe8, 0xac, 0xdb, 0x16, 0x4d, 0xaf, 0x23, 0xd1, 0x0b, 0xb2, 0xee, 0x18, 0xed,
	0x90, 0xfd, 0x26, 0xff, 0x6a, 0x7a, 0xc3, 0xff, 0x38, 0xe4, 0x2a, 0x84, 0xed, 0xbb, 0x71, 0x36,
	0x9e, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x51, 0xec, 0x4f, 0xfd, 0x03, 0x09, 0x00, 0x00,
}

func (this *ChainLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainLink)
	if !ok {
		that2, ok := that.(ChainLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if !this.Address.Equal(&that1.Address) {
		return false
	}
	if !this.Proof.Equal(&that1.Proof) {
		return false
	}
	if !this.ChainConfig.Equal(&that1.ChainConfig) {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	return true
}
func (this *ChainConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainConfig)
	if !ok {
		that2, ok := that.(ChainConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Proof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Proof)
	if !ok {
		that2, ok := that.(Proof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PubKey.Equal(that1.PubKey) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if this.PlainText != that1.PlainText {
		return false
	}
	return true
}
func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.GenerationAlgorithm != that1.GenerationAlgorithm {
		return false
	}
	if !this.EncodingAlgorithm.Equal(that1.EncodingAlgorithm) {
		return false
	}
	return true
}
func (this *SingleSignature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleSignature)
	if !ok {
		that2, ok := that.(SingleSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *CosmosMultiSignature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CosmosMultiSignature)
	if !ok {
		that2, ok := that.(CosmosMultiSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BitArray.Equal(that1.BitArray) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(that1.Signatures[i]) {
			return false
		}
	}
	return true
}
func (m *ChainLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintModelsChainLinks(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.ChainConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlainText) > 0 {
		i -= len(m.PlainText)
		copy(dAtA[i:], m.PlainText)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.PlainText)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncodingAlgorithm != nil {
		{
			size, err := m.EncodingAlgorithm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GenerationAlgorithm != 0 {
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(m.GenerationAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bech32Encoding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bech32Encoding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bech32Encoding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Base58Encoding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Base58Encoding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Base58Encoding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HexEncoding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HexEncoding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HexEncoding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uppercase {
		i--
		if m.Uppercase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SingleSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValueType != 0 {
		i = encodeVarintModelsChainLinks(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CosmosMultiSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosMultiSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosMultiSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BitArray != nil {
		{
			size, err := m.BitArray.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModelsChainLinks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModelsChainLinks(dAtA []byte, offset int, v uint64) int {
	offset -= sovModelsChainLinks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	l = m.Address.Size()
	n += 1 + l + sovModelsChainLinks(uint64(l))
	l = m.Proof.Size()
	n += 1 + l + sovModelsChainLinks(uint64(l))
	l = m.ChainConfig.Size()
	n += 1 + l + sovModelsChainLinks(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovModelsChainLinks(uint64(l))
	return n
}

func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	l = len(m.PlainText)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	if m.GenerationAlgorithm != 0 {
		n += 1 + sovModelsChainLinks(uint64(m.GenerationAlgorithm))
	}
	if m.EncodingAlgorithm != nil {
		l = m.EncodingAlgorithm.Size()
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	return n
}

func (m *Bech32Encoding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	return n
}

func (m *Base58Encoding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	return n
}

func (m *HexEncoding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	if m.Uppercase {
		n += 2
	}
	return n
}

func (m *SingleSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueType != 0 {
		n += 1 + sovModelsChainLinks(uint64(m.ValueType))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	return n
}

func (m *CosmosMultiSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BitArray != nil {
		l = m.BitArray.Size()
		n += 1 + l + sovModelsChainLinks(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovModelsChainLinks(uint64(l))
		}
	}
	return n
}

func sovModelsChainLinks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModelsChainLinks(x uint64) (n int) {
	return sovModelsChainLinks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &types.Any{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &types.Any{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerationAlgorithm", wireType)
			}
			m.GenerationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenerationAlgorithm |= GenerationAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodingAlgorithm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncodingAlgorithm == nil {
				m.EncodingAlgorithm = &types.Any{}
			}
			if err := m.EncodingAlgorithm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bech32Encoding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bech32Encoding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bech32Encoding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Base58Encoding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Base58Encoding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Base58Encoding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HexEncoding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HexEncoding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HexEncoding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uppercase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uppercase = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= SignatureValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosMultiSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosMultiSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosMultiSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BitArray == nil {
				m.BitArray = &types1.CompactBitArray{}
			}
			if err := m.BitArray.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &types.Any{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModelsChainLinks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModelsChainLinks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModelsChainLinks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModelsChainLinks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModelsChainLinks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModelsChainLinks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModelsChainLinks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModelsChainLinks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModelsChainLinks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModelsChainLinks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModelsChainLinks = fmt.Errorf("proto: unexpected end of group")
)
